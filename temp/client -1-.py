# client.py

import socket
import threading

# Функция для отправки сообщений серверу
def send_messages(client_socket):
    while True:
      # Ввод сообщения пользователем
      message = input()
      # Отправка сообщения серверу
      client_socket.sendall(message.encode('utf-8'))

# Функция для получения сообщений от сервера
def receive_messages(client_socket):
    while True:
        try:
            # Получение сообщения от сервера
            message = client_socket.recv(1024).decode('utf-8')
            # Вывод сообщения в консоль
            print(message)
        except ConnectionResetError:
            # Соединение с сервером потеряно
            print("Соединение с сервером потеряно.")
            break
        except Exception as e:
            # Любые другие исключения
            print(f"Ошибка: {e}")
            break

if __name__ == "__main__":
  name = input("Введите ваше имя: ")
  with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client_socket:
      # Подключение к серверу
      client_socket.connect(('127.0.0.1', 12345))
      # Отправка сообщения о присоединении к чату
      client_socket.sendall(f"{name} присоединился к чату.".encode('utf-8'))
      # Запуск потока для получения сообщений
      threading.Thread(target=receive_messages, args=(client_socket,)).start()
      # Функция для отправки сообщений
      send_messages(client_socket)


"""
Давайте рассмотрим пример использования этого чат-сервера и клиентского приложения.

1. **Запуск сервера**: Вы запускаете `server.py` на вашем сервере или локальной машине. Сервер начинает слушать входящие подключения на порту 12345.

2. **Подключение клиентов**: Пользователи запускают `client.py` на своих устройствах и подключаются к серверу. При запуске они вводят свои имена, которые будут использоваться в чате.

3. **Общение в чате**: Пользователи могут отправлять сообщения, которые будут рассылаться всем подключенным пользователям. Например, пользователь с именем "Анна" отправляет сообщение "Привет всем!", и все пользователи в чате видят "Анна: Привет всем!".

4. **Использование команды для определения IP**: Если кто-то в чате отправляет сообщение вида "Вычисли его по ip 8.8.8.8", сервер использует API Dadata для определения местоположения IP-адреса 8.8.8.8. После получения данных от Dadata, сервер отправляет сообщение в чат с информацией о местоположении, например, "IP-бот: Страна: США, Регион: Калифорния, Город: Маунтин-Вью".

5. **Завершение работы**: Когда пользователи закончат общение, они могут просто закрыть клиентское приложение. Если сервер будет остановлен, он закроет соединения с клиентами и завершит работу.

Вот как это будет выглядеть в коде:

**На стороне клиента (после запуска client.py):**
```
Введите ваше имя: Анна
Анна присоединилась к чату.
Привет всем!
```

**На стороне другого клиента:**
```
Анна присоединилась к чату.
Анна: Привет всем!
```

**Если Анна отправит команду для определения IP:**
```
Вычисли его по ip 8.8.8.8
```

**Все пользователи в чате увидят:**
```
IP-бот: Вычисляю…
IP-бот: Страна: США, Регион: Калифорния, Город: Маунтин-Вью
```

Это базовый пример того, как можно использовать сервер и клиентский код для создания простой чат-комнаты с функцией определения местоположения по IP-адресу.
"""
